<!DOCTYPE html>
<html>
  <head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <title>Input Variables</title>
  <meta name="keywords" content="input" />
  <link type="text/css" href="default.css" rel="stylesheet" />






</head>

<body style="background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;">



<table width="100%" border="0" cellpadding="0" cellspacing="0" style="margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
  <tr>
    <td valign="middle">
      <table style="margin: 10px 0" width="100%"  border="0" cellspacing="0" cellpadding="0">
        <tr valign="middle">
          <td class="nav">
<a class="h_m" href="index.htm">          MQL4/5 Reference </a> / <a class="h_m" href="basis.htm"> Language Basics </a> / <a class="h_m" href="variables.htm"> Variables </a>/ Input Variables
          </td>
          <td align="right" style="white-space: nowrap; padding: 0 10px;">
          <a href="global.htm"><img style="vertical-align:middle;" src="previous.png" alt="?????" width="27" height="27" border=0></a><!--
       --><a href="externvariables.htm"><img style="vertical-align:middle;margin-left: 7px;" src="next.png" alt="??????" width="27" height="27" border="0"></a>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>



<div id="help">
<p class="p_H1"><span class="f_H1">Input Variables</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_Text" style="color: #0000ff;">input</span><span class="f_Text"> storage class defines the external variable. The </span><span class="f_Text" style="font-style: italic;">input</span><span class="f_Text"> modifier is indicated before the data type. A variable with the input modifier can&#39;t be changed inside mql4-programs, such variables can be accessed for reading only. Values of input variables can be changed only by a user from the program properties window. External variables are always reinitialized immediately before the <a href="events.htm#oninit" class="topiclink">OnInit()</a> is called.</span></p>
<p class="p_Text"><span class="f_Text" style="font-weight: bold;">Example:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #808080;">//---&nbsp;input&nbsp;parameters</span>
<br><span class="f_CodeExample">input&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MA_Period=</span><span class="f_CodeExample" style="color: #008080;">13</span><span class="f_CodeExample">;</span>
<br><span class="f_CodeExample">input&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MA_Shift=</span><span class="f_CodeExample" style="color: #008080;">0</span><span class="f_CodeExample">;</span>
<br><span class="f_CodeExample">input&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">ENUM_MA_METHOD</span><span class="f_CodeExample">&nbsp;MA_Method=</span><span class="f_CodeExample" style="color: #0000ff;">MODE_SMMA</span><span class="f_CodeExample">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">Input variables determine the input parameters of a program. They are available from the Properties window of a program.</span></p>
<p class="p_Text" style="text-align: center;"><img class="help" alt="Set a value for an input parameter" title="Set a value for an input parameter" width="446" height="264" style="margin:0px auto 0px auto;width:446px;height:264px;border:none" src="inputs.png"/></p>
<p class="p_Text" style="text-align: center;"><span class="f_Text">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">There is another way to set how your input parameter will look like in the Inputs tab. For this, place a string comment after the description of an input parameter in the same line. In this way you can make names of input parameters more understandable for users.</span></p>
<p class="p_Text"><span class="f_Text" style="font-weight: bold;">Example:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #808080;">//---&nbsp;input&nbsp;parameters</span>
<br><span class="f_CodeExample" style="color: #0000ff;">input</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InpMAPeriod=13;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Smoothing&nbsp;period</span>
<br><span class="f_CodeExample" style="color: #0000ff;">input</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InpMAShift=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Line&nbsp;horizontal&nbsp;shift</span>
<br><span class="f_CodeExample" style="color: #0000ff;">input</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">ENUM_MA_METHOD</span><span class="f_CodeExample">&nbsp;InpMAMethod=</span><span class="f_CodeExample" style="color: #0000ff;">MODE_SMMA</span><span class="f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Smoothing&nbsp;method</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text" style="text-align: center;"><img class="help" alt="Reasonable method to display input parameters" title="Reasonable method to display input parameters" width="446" height="264" style="margin:0px auto 0px auto;width:446px;height:264px;border:none" src="human_inputs.png"/></p>
<p class="p_Text"><span class="f_Text" style="font-weight: bold;">Note: </span><span class="f_Text">Arrays and variables of <a href="classes.htm" class="topiclink">complex types</a> can&#39;t act as input variables.</span></p>
<p class="p_Text"><span class="f_Text" style="font-weight: bold;">Note: </span><span class="f_Text">The length of a string comment for Input variables cannot exceed 63 characters.</span></p>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>
<p class="p_H3"><a name="icustompassparameters" class="hmanchor"></a><span class="f_H3">Passing Parameters When Calling Custom Indicators from MQL4 Programs</span></p>
<p class="p_Text"><span class="f_Text">Custom Indicators are called using the <a href="icustom.htm" class="topiclink">iCustom()</a> function. After the name of the custom indicator, parameters should go in a strict accordance with the declaration of input variables of this custom indicator. If indicated parameters are less than input variables declared in the called custom indicator, the missing parameters are filled with values specified during the declaration of variables.</span></p>
<p class="p_Text"><span class="f_Text">If the custom indicator uses the <a href="events.htm#oncalculate" class="topiclink">OnCalculate</a> function of the first type (i.e., the indicator is calculated using the same array of data), then one of <a href="prices.htm#enum_applied_price_enum" class="topiclink">ENUM_APPLIED_PRICE</a> values or handle of another indicator should be used as the last parameter when calling such a custom indicator. All parameters corresponding to input variables must be clearly indicated.</span></p>
<p class="p_H3"><span class="f_H3">Enumerations as input Parameters</span></p>
<p class="p_Text"><span class="f_Text">Not only built-in enumerations provided in MQL4, but also user defined variables can be used as input variables (input parameters for mql4 programs). For example, we can create the dayOfWeek enumeration, describing days of the week, and use the input variable to specify a particular day of the week, not as a number, but in a more common way.</span></p>
<p class="p_Text"><span class="f_Text" style="font-weight: bold;">Example:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #0000ff;">#property</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">script_show_inputs</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;day&nbsp;of&nbsp;week</span>
<br><span class="f_CodeExample" style="color: #0000ff;">enum</span><span class="f_CodeExample">&nbsp;dayOfWeek&nbsp;</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;S=0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Sunday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;M=1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Monday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;T=2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Tuesday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;W=3,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Wednesday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;Th=4,&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Thursday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;Fr=5,&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Friday,</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;St=6,&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Saturday</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;input&nbsp;parameters</span>
<br><span class="f_CodeExample" style="color: #0000ff;">input</span><span class="f_CodeExample">&nbsp;dayOfWeek&nbsp;swapday=W;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">In order to enable a user to select a necessary value from the properties window during the script startup, we use the preprocessor command #property script_show_inputs. We start the script and can choose one of values of the dayOfWeek enumeration from the list. We start the EnumInInput script and go to the Inputs tab. By default, the value of swapday (day of triple swap charge) is Wednesday (W = 3), but we can specify any other value, and use this value to change the program operation.</span></p>
<p class="p_Text" style="text-align: center;"><img class="help" alt="Example of a custom enumeration as an input parameter" title="Example of a custom enumeration as an input parameter" width="619" height="312" style="margin:0px auto 0px auto;width:619px;height:312px;border:none" src="enumasinput.png"/></p>
<p class="p_Text"><span class="f_Text">Number of possible values of an enumeration is limited. In order to select an input value the drop-down list is used. Mnemonic names of enumeration members are used for values displayed in the list. If a comment is associated with a mnemonic name, as shown in this example, the comment content is used instead of the mnemonic name.</span></p>
<p class="p_Text"><span class="f_Text">Each value of the dayOfWeek enumeration has its value from 0 to 6, but in the list of parameters, comments specified for each value will be shown. This provides additional flexibility for writing programs with clear descriptions of input parameters.</span></p>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>
<p class="p_H2"><a name="sinput" class="hmanchor"></a><span class="f_H2">Variables with sinput Modifier</span></p>
<p class="p_Text"><span class="f_Text">Variables with </span><span class="f_Text" style="color: #0000ff;">input</span><span class="f_Text"> modifier allow not only setting external parameters values when launching programs but are also necessary when optimizing trading strategies in the Strategy Tester. Each input variable excluding the one of a string type can be used in optimization. </span></p>
<p class="p_Text"><span class="f_Text">Sometimes, it is necessary to exclude some external program parameters from the area of all passes in the tester. </span><span class="f_Text" style="color: #0000ff;">sinput</span><span class="f_Text"> memory modifier has been introduced for such cases. sinput stands for static external variable declaration (sinput = static input). It means that the following declaration in an Expert Advisor code</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #0000ff;">sinput</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;layers=6;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Number&nbsp;of&nbsp;layers</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">will be equivalent to the full declaration</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #0000ff;">static&nbsp;input</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;layers=6;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Number&nbsp;of&nbsp;layers</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">The variable declared with sinput modifier is an input parameter of MQL4 program. The value of this parameter can be changed when launching the program. However, this variable is not used in the optimization of input parameters. In other words, its values are not enumerated when searching for the best set of parameters fitting a specified condition.</span></p>
<p class="p_Text" style="text-align: center;"><img class="help" alt="sinput parameter in the Strategy Tester" title="sinput parameter in the Strategy Tester" width="761" height="208" style="margin:0px auto 0px auto;width:761px;height:208px;border:none" src="sinput.png"/></p>
<p class="p_Text"><span class="f_Text">The Expert Advisor shown above has 5 external parameters. &quot;Number of layers&quot; is declared to be </span><span class="f_Text" style="color: #0000ff;">sinput</span><span class="f_Text"> and equal to 6. This parameter cannot be changed during a trading strategy optimization. We can specify the necessary value for it to be used further on. Start, Step and Stop fields are not available for such a variable.</span></p>
<p class="p_Text"><span class="f_Text">Therefore, users will not be able to optimize this parameter after we specify sinput modifier for the variable. In other words, the terminal users will not be able to set initial and final values for it in the Strategy Tester for automatic enumeration in the specified range during optimization.</span></p>
<p class="p_Text"><span class="f_Text">However, there is one exception to this rule: sinput variables can be varied in optimization tasks using ParameterSetRange() function. This function has been introduced specifically for the program control of available values sets for any <a href="inputvariables.htm" class="topiclink">input</a> variable including the ones declared as </span><span class="f_Text" style="color: #0000ff;">static input</span><span class="f_Text"> (sinput). The ParameterGetInput() function allows to receive input variables values when optimization is launched (in OnTesterInit() handler) and to reset a change step value and a range, within which an optimized parameter values will be enumerated.</span></p>
<p class="p_Text"><span class="f_Text">In this way, combining the sinput modifier and two functions that work with input parameters, allows to create a flexible rules for setting optimization intervals of input parameters that depend on values of another input parameters.</span></p>
<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span></p>
<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="icustom.htm" class="topiclink">iCustom</a>, <a href="enumeration.htm" class="topiclink">Enumerations</a>, <a href="compilation.htm" class="topiclink">Properties of Programs</a></span></p>

<br>
</div>
</body>
</html>
