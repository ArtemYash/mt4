<!DOCTYPE html>
<html>
  <head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <title>Abstract Classes</title>
  <meta name="keywords" content="pure" />
  <link type="text/css" href="default.css" rel="stylesheet" />






</head>

<body style="background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;">



<table width="100%" border="0" cellpadding="0" cellspacing="0" style="margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
  <tr>
    <td valign="middle">
      <table style="margin: 10px 0" width="100%"  border="0" cellspacing="0" cellpadding="0">
        <tr valign="middle">
          <td class="nav">
<a class="h_m" href="index.htm">          MQL4/5 Reference </a> / <a class="h_m" href="basis.htm"> Language Basics </a> / <a class="h_m" href="oop.htm"> Object-Oriented Programming </a>/ Abstract Classes
          </td>
          <td align="right" style="white-space: nowrap; padding: 0 10px;">
          <a href="class_templates.htm"><img style="vertical-align:middle;" src="previous.png" alt="?????" width="27" height="27" border=0></a><!--
       --><a href="constants.htm"><img style="vertical-align:middle;margin-left: 7px;" src="next.png" alt="??????" width="27" height="27" border="0"></a>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>



<div id="help">
<p class="p_H1"><span class="f_H1">Abstract Classes and Pure Virtual Functions</span></p>
<p class="p_Text"><span class="f_Text">Abstract classes are used for creating generic entities, that you expect to use for creating more specific derived classes. An abstract class can only be used as the base class for some other class, that is why it is impossible to create an object of the abstract class type.</span></p>
<p class="p_Text"><span class="f_Text">A class which contains at least one pure virtual function in it is abstract. Therefore, classes derived from the abstract class must implement all its pure virtual functions, otherwise they will also be abstract classes.</span></p>
<p class="p_Text"><span class="f_Text">A virtual function is declared as &quot;pure&quot; by using the pure-specifier syntax. Consider the example of the CAnimal class, which is only created to provide common functions – the objects of the CAnimal type are too general for practical use. Thus, CAnimal is a good example for an abstract class:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #0000ff;">class</span><span class="f_CodeExample">&nbsp;CAnimal</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample" style="color: #0000ff;">public</span><span class="f_CodeExample">:</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAnimal();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Constructor</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">virtual</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound()&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;A&nbsp;pure&nbsp;virtual&nbsp;function</span>
<br><span class="f_CodeExample" style="color: #0000ff;">private</span><span class="f_CodeExample">:</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_legs_count;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;The&nbsp;number&nbsp;of&nbsp;the&nbsp;animal&#39;s&nbsp;legs</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">Here Sound() is a pure virtual function, because it is declared with the specifier of the pure virtual function PURE (</span><span class="f_Text" style="font-weight: bold;">=0</span><span class="f_Text">).</span></p>
<p class="p_Text"><span class="f_Text">Pure virtual functions are only the virtual functions for which the PURE specifier is set: (=NULL) or (=0). Example of abstract class declaration and use:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #0000ff;">class</span><span class="f_CodeExample">&nbsp;CAnimal</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample" style="color: #0000ff;">public</span><span class="f_CodeExample">:</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">virtual</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound()=</span><span class="f_CodeExample" style="color: #0000ff;">NULL</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;PURE&nbsp;method,&nbsp;should&nbsp;be&nbsp;overridden&nbsp;in&nbsp;the&nbsp;derived&nbsp;class,&nbsp;CAnimal&nbsp;is&nbsp;now&nbsp;abstract&nbsp;and&nbsp;cannot&nbsp;be&nbsp;created</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Derived&nbsp;from&nbsp;an&nbsp;abstract&nbsp;class</span>
<br><span class="f_CodeExample" style="color: #0000ff;">class</span><span class="f_CodeExample">&nbsp;CCat&nbsp;:&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">public</span><span class="f_CodeExample">&nbsp;CAnimal</span>
<br><span class="f_CodeExample">&nbsp;{</span>
<br><span class="f_CodeExample" style="color: #0000ff;">public</span><span class="f_CodeExample">:</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">virtual</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample">Sound()&nbsp;{&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">Print</span><span class="f_CodeExample">(</span><span class="f_CodeExample" style="color: #008080;">&quot;Myau&quot;</span><span class="f_CodeExample">);&nbsp;}&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;PURE&nbsp;is&nbsp;overridden,&nbsp;CCat&nbsp;is&nbsp;not&nbsp;abstract&nbsp;and&nbsp;can&nbsp;be&nbsp;created</span>
<br><span class="f_CodeExample">&nbsp;};</span>
<br><span class="f_CodeExample">&nbsp;</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Examples&nbsp;of&nbsp;wrong&nbsp;use</span>
<br><span class="f_CodeExample" style="color: #0000ff;">new</span><span class="f_CodeExample">&nbsp;CAnimal;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Error&nbsp;of&nbsp;&#39;CAnimal&#39;&nbsp;-&nbsp;the&nbsp;compiler&nbsp;returns&nbsp;the&nbsp;&quot;cannot&nbsp;instantiate&nbsp;abstract&nbsp;class&quot;&nbsp;error</span>
<br><span class="f_CodeExample">CAnimal&nbsp;some_animal;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Error&nbsp;of&nbsp;&#39;CAnimal&#39;&nbsp;-&nbsp;the&nbsp;compiler&nbsp;returns&nbsp;the&nbsp;&quot;cannot&nbsp;instantiate&nbsp;abstract&nbsp;class&quot;&nbsp;error</span>
<br><span class="f_CodeExample">&nbsp;</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Examples&nbsp;of&nbsp;proper&nbsp;use</span>
<br><span class="f_CodeExample" style="color: #0000ff;">new</span><span class="f_CodeExample">&nbsp;CCat;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;No&nbsp;error&nbsp;-&nbsp;the&nbsp;CCat&nbsp;class&nbsp;is&nbsp;not&nbsp;abstract</span>
<br><span class="f_CodeExample">CCat&nbsp;cat;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;No&nbsp;error&nbsp;-&nbsp;the&nbsp;CCat&nbsp;class&nbsp;is&nbsp;not&nbsp;abstract</span></p>
</td>
</tr>
</table>
</div>
<p class="p_H2"><span class="f_H2">&nbsp;</span><br>
<span class="f_H2">Restrictions on abstract classes</span></p>
<p class="p_Text"><span class="f_Text">If the constructor for an abstract class calls a pure virtual function (either directly or indirectly), the result is undefined.</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #808080;">//+------------------------------------------------------------------+</span>
<br><span class="f_CodeExample" style="color: #808080;">//|&nbsp;An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span>
<br><span class="f_CodeExample" style="color: #808080;">//+------------------------------------------------------------------+</span>
<br><span class="f_CodeExample" style="color: #0000ff;">class</span><span class="f_CodeExample">&nbsp;CAnimal</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample" style="color: #0000ff;">public</span><span class="f_CodeExample">:</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;A&nbsp;pure&nbsp;virtual&nbsp;function</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">virtual</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound(</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">)=</span><span class="f_CodeExample" style="color: #0000ff;">NULL</span><span class="f_CodeExample">;</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Function</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CallSound(</span><span class="f_CodeExample" style="color: #0000ff;">void</span><span class="f_CodeExample">)&nbsp;{&nbsp;Sound();&nbsp;}</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Constructor</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;CAnimal()</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;An&nbsp;explicit&nbsp;call&nbsp;of&nbsp;the&nbsp;virtual&nbsp;method</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound();</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;An&nbsp;implicit&nbsp;call&nbsp;(using&nbsp;a&nbsp;third&nbsp;function)</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CallSound();</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;A&nbsp;constructor&nbsp;and/or&nbsp;destructor&nbsp;always&nbsp;calls&nbsp;its&nbsp;own&nbsp;functions,</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;even&nbsp;if&nbsp;they&nbsp;are&nbsp;virtual&nbsp;and&nbsp;overridden&nbsp;by&nbsp;a&nbsp;called&nbsp;function&nbsp;in&nbsp;a&nbsp;derived&nbsp;class</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;If&nbsp;the&nbsp;called&nbsp;function&nbsp;is&nbsp;pure&nbsp;virtual,</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//---&nbsp;its&nbsp;call&nbsp;will&nbsp;cause&nbsp;a&nbsp;critical&nbsp;runtime&nbsp;error:&nbsp;&quot;pure&nbsp;virtual&nbsp;function&nbsp;call&quot;</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;}</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">However, constructors and destructors for abstract classes can call other member functions.</span></p>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>

<br>
</div>
</body>
</html>
