<!DOCTYPE html>
<html>
  <head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <title>Updated MQL4</title>
  <meta name="keywords" content="" />
  <link type="text/css" href="default.css" rel="stylesheet" />






</head>

<body style="background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;">



<table width="100%" border="0" cellpadding="0" cellspacing="0" style="margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
  <tr>
    <td valign="middle">
      <table style="margin: 10px 0" width="100%"  border="0" cellspacing="0" cellpadding="0">
        <tr valign="middle">
          <td class="nav">
<a class="h_m" href="index.htm">          MQL4/5 Reference </a>/ Updated MQL4
          </td>
          <td align="right" style="white-space: nowrap; padding: 0 10px;">
          <a href="index.htm"><img style="vertical-align:middle;" src="previous.png" alt="?????" width="27" height="27" border=0></a><!--
       --><a href="basis.htm"><img style="vertical-align:middle;margin-left: 7px;" src="next.png" alt="??????" width="27" height="27" border="0"></a>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>



<div id="help">
<p class="p_H1"><span class="f_H1">What&#39;s New in MQL4/5</span></p>
<p class="p_Text"><span class="f_Text">Starting from build 600, MQL4 programming language has been completely revised reaching the level of MQL5 - now you can develop trading robots in MQL4/5 using the unified MetaEditor development environment, single style, libraries and debugging tools.</span></p>
<p class="p_Text"><span class="f_Text">MQL4 is popular among automated system developers due to the ease of learning and a huge amount of code generated for many years of using MetaTrader 4 terminal. However, the language also has some drawbacks arising from its main advantage - a simple programming language does not allow development of complex systems and hinders porting of debugged libraries from high-level languages. Therefore, we decided to implement in it the maximum possible amount of MQL4/5 language functions and features fully preserving MQL4 functionality. In other words, all powerful MQL5 functions, including &#1054;&#1054;P and the native code compiler, will become available in MQL4.</span></p>
<p class="p_Text"><span class="f_Text">To achieve this, we have developed a unified compiler that automatically supports both MQL4 and MQL5 languages. MetaEditor will also become a unified application both for MetaTrader 4 and MetaTrader 5 platforms. Thus, it will be possible to compile both MQL4 and MQL5 from any version. MQL5 Storage also becomes available for work.</span></p>
<p class="p_Text"><span class="f_Text">Protection of MQL4 applications rises to MQL5 level. New EX4/EX5 files are provided with a serious and completely revised protection. This means that the Market of secure EX4 applications also becomes available to MetaTrader 4.</span></p>
<p class="p_Text"><span class="f_Text">Besides, MQL4 now features new graphical objects and new functions for working with charts. MQL5 Standard Library is to be ported to MQL4 providing developers with new possibilities in creating their own graphical interfaces and trading libraries. Now, you can create full-fledged applications in MetaTrader 4 using the resources.</span><br>
<span class="f_Text">&nbsp;</span></p>
<p class="p_H1"><span class="f_H1">Changes in MQL4/5 Language</span></p>
<p class="p_Text"><span class="f_Text">Added new <a href="integertypes.htm#char" class="topiclink">char</a>, <a href="integertypes.htm#short" class="topiclink">short</a>, <a href="integertypes.htm#long" class="topiclink">long</a>, <a href="integertypes.htm#uchar" class="topiclink">uchar</a>, <a href="integertypes.htm#ushort" class="topiclink">ushort</a>, <a href="integertypes.htm#uint" class="topiclink">uint</a>, <a href="integertypes.htm#ulong" class="topiclink">ulong</a> and <a href="double.htm" class="topiclink">double</a> data types. This will allow transferring codes from other C++ like languages. Data of various types is processed at different rates. Integer data is the fastest one to be processed. A special co-processor is used to handle the double-precision data. However, due to the complexity of the internal representation of floating-point data, it is processed slower than integer one. <a href="casting.htm" class="topiclink">Typecasting</a> has also been implemented.</span></p>
<p class="p_Text"><span class="f_Text">Strings are now presented in Unicode format, though they were in ANSI format (single byte ones) before. That should be considered if the program uses DLLs and passes string variables to them.</span></p>
<p class="p_Text"><span class="f_Text">Predefined <a href="volume.htm" class="topiclink">Volume</a> variable is now of long type. The time series for accessing the volumes also consist of long type arrays. It is recommended to use explicit casting of data having this type to the target type in old MQL4 programs to avoid type overflow error.</span></p>
<p class="p_Text"><span class="f_Text">Structures and classes, object pointers, <a href="void.htm" class="topiclink">void</a> type and <a href="this.htm" class="topiclink">this</a> key word allowing an object to receive a reference to itself have been added. All object-oriented programming standards are supported:</span></p>
<ul style="text-indent:0px; padding-left:0; margin-top:0; margin-bottom:0; margin-left: 30px;list-style-position:outside; list-style-type:disc">
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 8px; margin-right: 17px; margin-bottom: 7px;"><span class="f_Text"><a href="incapsulation.htm" class="topiclink">Encapsulation and Extensibility of Types</a></span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 8px; margin-right: 17px; margin-bottom: 7px;"><span class="f_Text"><a href="inheritance.htm" class="topiclink">Inheritance</a></span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 8px; margin-right: 17px; margin-bottom: 7px;"><span class="f_Text"><a href="polymorphism.htm" class="topiclink">Polymorphism</a></span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 8px; margin-right: 17px; margin-bottom: 7px;"><span class="f_Text"><a href="overload.htm" class="topiclink">Overload</a></span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 8px; margin-right: 17px; margin-bottom: 7px;"><span class="f_Text"><a href="virtual.htm" class="topiclink">Virtual functions</a></span></li>
</ul>
<p class="p_Text"><span class="f_Text">&#1054;&#1054;P allows developing programs using classes. This facilitates debugging and development of large applications, as well as provides ability to reuse previously generated code multiple times due to inheritance. However, that does not mean that you cannot generate your MQL4 code in procedure-oriented style as before. You can develop your programs as you did in the past if you don&#39;t need the new features.</span></p>
<p class="p_Text"><span class="f_Text">init(), deinit() and start() predefined functions have remained for compatibility, however, <a href="events.htm#oninit" class="topiclink">OnInit()</a>, <a href="events.htm#ondeinit" class="topiclink">OnDeinit()</a>, <a href="events.htm#onstart" class="topiclink">OnStart()</a>, <a href="events.htm#oncalculate" class="topiclink">OnCalculate()</a> and <a href="events.htm#ontick" class="topiclink">OnTick()</a> ones can now be used instead. Besides, new predefined <a href="events.htm#ontimer" class="topiclink">OnTimer()</a>, <a href="events.htm#onchartevent" class="topiclink">OnChartEvent()</a> and <a href="events.htm#ontester" class="topiclink">OnTester()</a> handler functions have been implemented. In the previous MQL4, predefined functions could have any parameters and any return type, and they could be called by their names, not signatures. In the new MQL4, all predefined functions should strictly correspond to their signatures. In other words, they should have precisely defined set of parameters and return type.</span></p>
<p class="p_Text"><span class="f_Text">Now, variable names cannot contain special characters and points, and new <MQL4/5 language> keywords cannot be used as names. Old MQL4 programs can be recompiled with the new compiler in order to easily correct all such errors while following the compiler&#39;s messages.</span></p>
<p class="p_Text"><span class="f_Text">The <a href="rules.htm" class="topiclink">Precedence rule</a> now matches C language standards. If you are unsure, you can insert parentheses in old MQL4 apps to clearly indicate the priority to increase reliability. </span></p>
<p class="p_Text"><span class="f_Text">Shortened conditions check is now used in <a href="bool.htm" class="topiclink">logical operations</a>, unlike the old MQL4 version where all expressions have been calculated and the check has been performed afterwards. Suppose there is a check of two conditions with the use of logical AND:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">if</span><span class="f_CodeExample">(condition1&nbsp;&amp;&amp;&nbsp;condition2)</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;some&nbsp;block&nbsp;of&nbsp;statements</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">If condition1 expression is false, calculation of condition2 expression is not performed, as false &amp;&amp; true result is still equal to false.</span></p>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text"><a href="arraycopyrates.htm" class="topiclink">ArrayCopyRates()</a> function behavior has changed. In the previous MQL4 versions this function was used for copying price series to array double[][6]. Now, if you need to receive a time series, use the arrays of the <a href="mqlrates.htm" class="topiclink">MqlRates</a> structure elements:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample" style="color: #808080;">//---&nbsp;Structure&nbsp;that&nbsp;stores&nbsp;information&nbsp;about&nbsp;the&nbsp;prices,&nbsp;volumes&nbsp;and&nbsp;spread.</span>
<br><span class="f_CodeExample" style="color: #0000ff;">struct&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">MqlRates</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">datetime</span><span class="f_CodeExample">&nbsp;</span><span class="f_Param">time</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Period&nbsp;start&nbsp;time</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Param">open</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Open&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Param">high</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;The&nbsp;highest&nbsp;price&nbsp;of&nbsp;the&nbsp;period</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Param">low</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;The&nbsp;lowest&nbsp;price&nbsp;of&nbsp;the&nbsp;period</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Param">close</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Close&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">long</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">tick_volume</span><span class="f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Tick&nbsp;volume</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">spread</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Spread</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">long</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">real_volume</span><span class="f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #808080;">//&nbsp;Trade&nbsp;volume</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">Also the new function format can be used for virtual copying, when there is no actual copying, and accessing the copied values you actually access the price data.</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_Keywords">int&nbsp;&nbsp;</span><span class="f_Functions">ArrayCopyRates</span><span class="f_CodeExample">(</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">MqlRates&amp;</span><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_Param">rates_array[]</span><span class="f_CodeExample">,&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;MqlRates&nbsp;array,&nbsp;passed&nbsp;by&nbsp;reference</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">string&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample">&nbsp;</span><span class="f_Param">symbol=NULL</span><span class="f_CodeExample">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;symbol</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">timeframe=0&nbsp;&nbsp;</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;timeframe</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">To provide compatibility with old MQL4 programs, the previous call format is also preserved, but now it leads to actual copying of data into a double-type array. </span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_Keywords">int&nbsp;&nbsp;</span><span class="f_Functions">ArrayCopyRates</span><span class="f_CodeExample">(</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">void&amp;</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">dest_array[][]</span><span class="f_CodeExample">,&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;destination&nbsp;array,&nbsp;passed&nbsp;by&nbsp;reference</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">string&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample">&nbsp;</span><span class="f_Param">symbol=NULL</span><span class="f_CodeExample">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;symbol</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">timeframe=0&nbsp;&nbsp;</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;timeframe</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">This means that when the values in the time series change (new bars are added, restructuring, the last bar&#39;s Close price is uodated), you must re-copy the required data into the dest_array[][]. The receiver array will be automatically allocated for the required number of copied bars, even if it was declared statically.</span></p>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">Changed RateInfo history data storage format. RateInfo structure was presented as follows in the old version: </span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_Keywords">struct</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">RateInfo</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">unsigned</span><span class="f_CodeExample">&nbsp;</span><span class="f_Keywords">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">ctm</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;bar&nbsp;open&nbsp;date</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">open</span><span class="f_CodeExample">;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;Open&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">low</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;Low&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">high</span><span class="f_CodeExample">;&nbsp;</span><span class="f_Comments">&nbsp;//&nbsp;High&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">close</span><span class="f_CodeExample">;&nbsp;</span><span class="f_Comments">//&nbsp;Close&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">vol</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;volume</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">In the new format, RateInfo structure features fields for storing spread and trading volume:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_Comments">//---&nbsp;Standard&nbsp;quote&nbsp;presentation&nbsp;in&nbsp;the&nbsp;new&nbsp;terminal&nbsp;version</span>
<br><span class="f_Keywords">struct</span><span class="f_CodeExample">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">RateInfo</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;{</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">INT64</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">ctm</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;open&nbsp;date&nbsp;and&nbsp;time</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">open</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;Open&nbsp;price&nbsp;(absolute&nbsp;value)</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">high</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;Low&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">low</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;High&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">double</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">close</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;Close&nbsp;price</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">UINT64</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">vol</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;tick&nbsp;volume</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">INT32</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">spread</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;spread</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class="f_Keywords">UINT64</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Param">real</span><span class="f_CodeExample">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;trade&nbsp;volume</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;};</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">Thus, if MQL4 programs contain DLLs for passing/accepting price data, the corresponding functions in the source codes should be rewritten and recompiled considering format changes to ensure proper operation.</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_Text"><span class="f_Text" style="font-weight: bold;">Old EX4 applications and DLLs based on old RateInfo format will not work in the new terminal. Conversion to the new format is required.</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">In <a href="files.htm" class="topiclink">file operations</a>, the number of simultaneously opened files can now reach 64 ones, while there could be no more than 32 ones in the old MQL4. Until recently, the files were always opened in FILE_SHARE_READ or FILE_SHARE_WRITE mode. Now, the necessary opening mode should be specified explicitly.</span></p>
<p class="p_Text"><span class="f_Text">For <a href="filewrite.htm" class="topiclink">FileWrite()</a>, <a href="filewritearray.htm" class="topiclink">FileWriteArray()</a>, <a href="filewritedouble.htm" class="topiclink">FileWriteDouble()</a>, <a href="filewriteinteger.htm" class="topiclink">FileWriteInteger()</a> and <a href="filewritestring.htm" class="topiclink">FileWriteString()</a> functions the type of returned value has been changed from <a href="integertypes.htm#int" class="topiclink">int</a> to <a href="integertypes.htm#uint" class="topiclink">uint</a>. The functions return the number of bytes, actually written or 0 in case of error (in old version of MQL4 the negative number is returned in case of error).</span></p>
<p class="p_Text"><span class="f_Text">Working with functions, scope of variables and memory release in local arrays has also been changed. Since the number of changes is large enough, the new <a href="preprosessor.htm" class="topiclink">#property strict</a> property has been introduced to provide maximum compatibility with the previous approach to developing MQL4 programs. When creating new MQL4 application using MQL wizard, this property is always added to the template. </span></p>
<p class="p_Text"><span class="f_Text">The string representation of </span><span class="f_Text" style="color: #0000ff;"><a href="datetime.htm" class="topiclink">datetime</a></span><span class="f_Text"> type depends on compilation mode: </span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_CodeExample" style="page-break-inside: avoid;"><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">datetime</span><span class="f_CodeExample">&nbsp;date=D&#39;2014.03.05&nbsp;15:46:58&#39;;</span>
<br><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">string</span><span class="f_CodeExample">&nbsp;str=</span><span class="f_CodeExample" style="color: #008080;">&quot;mydate=&quot;</span><span class="f_CodeExample">+date;</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;str=&quot;mydate=1394034418&quot;&nbsp;-&nbsp;old&nbsp;compiler/new&nbsp;compiler&nbsp;without&nbsp;#property&nbsp;strict</span>
<br><span class="f_CodeExample" style="color: #808080;">//---&nbsp;str=&quot;mydate=2014.03.05&nbsp;15:46:58&quot;&nbsp;-&nbsp;new&nbsp;compiler&nbsp;with&nbsp;#property&nbsp;strict</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">The table below contains the differences between MQL4, new MQL4 without using strict and new MQL4 with specified strict compilation mode:</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_Normal"><span class="f_CodeExample" style="color: #0000ff;">#property</span><span class="f_CodeExample"> </span><span class="f_CodeExample" style="color: #0000ff;">strict</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">When compiling libraries in the strict mode, the <a href="export.htm" class="topiclink">export</a> modifier should be added for each exported function, otherwise the function will not be accessible from outside.</span></p>
<p class="p_Text"><a name="compiler_difference" class="hmanchor"></a><span class="f_Text">The table of differences between compilers:</span></p>
<div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;"><table class="EnumTable" cellspacing="0" cellpadding="5" border="1" style="border:solid 2px #b1c2d6; border-spacing:0px; border-collapse:collapse;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; background-color:#dbe9f9; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable" style="font-weight: bold;">Old MQL4 compiler</span></p>
</td>
<td style="vertical-align:top; width:345px; background-color:#dbe9f9; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable" style="font-weight: bold;">New MQL4 compiler</span></p>
</td>
<td style="vertical-align:top; width:400px; background-color:#dbe9f9; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable" style="font-weight: bold;">New MQL4 with #property strict</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">init(), start() and deinit() entry points may have any parameters and any return type </span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">init(), start() and deinit() have been remained intact for compatibility,</span></p>
<p class="p_fortable"><span class="f_fortable">while new <a href="events.htm#oninit" class="topiclink">OnInit()</a>, <a href="events.htm#onstart" class="topiclink">OnStart()</a>, <a href="events.htm#oncalculate" class="topiclink">OnCalculate()</a>, <a href="events.htm#ontick" class="topiclink">OnTick()</a>, <a href="events.htm#ontimer" class="topiclink">OnTimer()</a>, <a href="events.htm#onchartevent" class="topiclink">OnChartEvent()</a>, <a href="events.htm#ontester" class="topiclink">OnTester()</a> and <a href="events.htm#ondeinit" class="topiclink">OnDeinit()</a> should strictly correspond to their signatures</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The result of the return from init() function is not analyzed by the runtime subsystem</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The result of the return from init() and OnInit() functions is not analyzed by the runtime subsystem</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">If a non-zero value is returned from OnInit(), the operation of an Expert Advisor or an indicator is stopped, the program is unloaded</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Virtually any variable names (except for the reserved words) are possible, including special characters and points</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Variable names cannot have special characters and points.</span></p>
<p class="p_fortable"><span class="f_fortable">The list of the <a href="reserved.htm" class="topiclink">reserved words</a> has been expanded. Thus, such widespread words as short, long, const, etc. cannot be used as names</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Variable scope is from declaration (even in the nested block) to the function end</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Variable scope is from declaration to the end of the block, in which the variable is declared</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Implicit initialization of all the variables (both global and local ones) by zero</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Only global variables are initialized. In local variables, only strings are initialized implicitly</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Local arrays are not released when exiting the function</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Local arrays are released when exiting the function</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Local arrays are released when exiting {} block</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable" style="font-weight: bold;">&quot;Array out of range&quot;</span><span class="f_fortable"> does not cause a critical error</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto, except for the arrays of structures and classes, for which this error is critical one</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable" style="font-weight: bold;">&quot;Array out of range&quot;</span><span class="f_fortable"> is a critical error causing the program to stop</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">No structures and classes</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable"><a href="classes.htm" class="topiclink">Structures and classes</a> are present. Additional data types are implemented</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Strings are single-byte.</span></p>
<p class="p_fortable"><span class="f_fortable">datetime is a 32-bit integer</span></p>
<p class="p_fortable"><span class="f_fortable">Predefined Volume variable is of double type</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Strings are unicode ones.</span></p>
<p class="p_fortable"><span class="f_fortable">datetime is a 64-bit integer</span></p>
<p class="p_fortable"><span class="f_fortable">Predefined <a href="volume.htm" class="topiclink">Volume</a> variable is of long type</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable"><a href="arraycopyrates.htm" class="topiclink">ArrayCopyRates()</a> performs virtual copying to double[][6] array </span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable"><a href="arraycopyrates.htm" class="topiclink">ArrayCopyRates()</a> performs virtual copying to MqlRates[] array. Copying to double[][6] array has remained intact for the sake of compatibility, however, that copying is real, not virtual.</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The functions may not return values even if they have a type. To do this, return(0) is automatically inserted by the compiler in the function end</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Functions of any type should return a value</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The number of simultaneously opened files is 32</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The number of simultaneously opened files is 64</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The files are always opened in FILE_SHARE_READ, FILE_SHARE_WRITE mode **</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">FILE_SHARE_READ and/or FILE_SHARE_WRITE should be specified explicitly</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">Ditto</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:339px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The names of <a href="externvariables.htm" class="topiclink">extern</a> variables are displayed for scripts in the input parameters window</span></p>
</td>
<td style="vertical-align:top; width:345px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">The names of <a href="externvariables.htm" class="topiclink">extern</a> and <a href="inputvariables.htm" class="topiclink">input</a> variables are displayed for scripts in show_inputs mode in the input parameters window</span></p>
</td>
<td style="vertical-align:top; width:400px; padding:5px; border:solid thin #b1c2d6;"><p class="p_fortable"><span class="f_fortable">String comments instead of <a href="externvariables.htm" class="topiclink">extern</a> and <a href="inputvariables.htm" class="topiclink">input</a> variable names are displayed for scripts in show_inputs mode in the input parameters window </span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">* Please pay special attention to &quot;Array out of range&quot; error - many old custom indicators will display this error in strict mode of the new compiler when launched on the chart. It is recommended to find the cause and eliminate it.</span></p>
<p class="p_Text"><span class="f_Text">** &nbsp;In the new MQL4 and MQL5, FILE_SHARE_READ and FILE_SHARE_WRITE flags are responsible for the files shared use mode. There were no such files in the old MQL4.</span></p>
<p class="p_H1"><span class="f_H1">&nbsp;</span></p>
<p class="p_H1"><span class="f_H1">Changes in File Structure</span></p>
<p class="p_Text"><span class="f_Text">In the previous builds of MetaTrader 4 client terminal (509 and older), all MQL4 applications were stored in the following subdirectories of </span><span class="f_Text" style="font-weight: bold;">&lt;terminal_installation_folder&gt;\experts\</span><span class="f_Text"> root directory:</span></p>
<ul style="text-indent:0px; padding-left:0; margin-top:0; margin-bottom:0; margin-left: 30px;list-style-position:outside; list-style-type:disc">
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\experts - Expert Advisors (trading robots),</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\experts\indicators - custom indicators,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\experts\scripts - scripts (MQL4 applications for a single run on the chart),</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\include - source code MQH and MQ4 files implemented into other programs,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\libraries - libraries in the form of MQ4 source codes and EX4 executable files compiled from them. They are used for the dynamic call of the functions contained there by other MQL4 programs,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\files - special &quot;file sandbox&quot;. MQL4 applications are allowed to execute file operations only within this directory.</span></li>
</ul>
<p class="p_Text"><span class="f_Text">&nbsp;</span><br>
<span class="f_Text">In the new MQL4 version, the file structure for storing the source codes has changed. Now, all MQL4 applications should be located in the appropriate folders of </span><span class="f_Text" style="font-weight: bold;">&lt;data_folder&gt;\MQL4\</span><span class="f_Text"> directory:</span></p>
<ul style="text-indent:0px; padding-left:0; margin-top:0; margin-bottom:0; margin-left: 30px;list-style-position:outside; list-style-type:disc">
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Experts - Expert Advisors (trading robots),</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Indicators - custom indicators,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Scripts - scripts (MQL4 applications for a single run on the chart),</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Include - source code MQH and MQ4 files implemented into other programs,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Libraries - libraries in the form of MQ4 source codes and EX4 executable files compiled from them. They are used for the dynamic call of the functions contained there by other MQL4 programs,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Images - image files for using in resources,</span></li>
<li style="text-align: justify; padding: 0px 0px 0px 0px; margin-top: 3px; margin-right: 17px; margin-bottom: 3px;"><span class="f_li">\Files - special &quot;file sandbox&quot;. MQL4 applications are allowed to execute file operations only within this directory.</span></li>
</ul>
<p class="p_Text"><span class="f_Text">When updating MetaTrader 4 terminal from build 509 to the newer version, all MQ4, MQH and EX4 files from standard root directories of the previous version are automatically copied and relocated to the appropriate folders. </span><span class="f_Text" style="font-weight: bold;">Subfolders additionally created by a user, as well as files contained there are not processed.</span><span class="f_Text"> They should be relocated to the new place manually if necessary.</span><br>
<span class="f_Text">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; line-height: 1.0; page-break-inside: avoid; border-color: #b3b3b3; border-style: solid; border-width: thin; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;"><table cellspacing="0" cellpadding="3" border="0" style="text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;"><p class="p_Text"><span class="f_Text" style="font-weight: bold;">No files or folders are deleted during the update!</span><span class="f_Text"> All file copy operations including used file paths are fixed in the terminal Journal during the update.</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">&nbsp;</span><br>
<span class="f_Text" style="font-weight: bold;">No automatic re-compilation of the old EX4 files to the new version is performed during the update.</span><span class="f_Text"> Users are free to decide what source codes should be compiled to the new EX4 version. All old EX4 will work in the new MetaTrader 4 terminal. EX4 libraries compiled by the new compiler can be called only from the EX4 programs that have also been compiled in the new version.</span></p>
<p class="p_Text"><span class="f_Text">In some cases, you may need to edit the path in <a href="include.htm" class="topiclink">#include</a> for included files (if relative paths have changed) in the source files. Please note that MetaEditor&#39;s root directory is now &lt;data_folder&gt;\MQL4\. All programs should be located in the correct subdirectories.</span></p>
<p class="p_Text"><span class="f_Text">You can find the data folder (&lt;data_folder&gt;) for each copy of MetaTrader 4 terminal on your computer via the terminal menu or in MetaEditor: File - Open Data Folder.</span></p>

<br>
</div>
</body>
</html>
